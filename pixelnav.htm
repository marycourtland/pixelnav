<!DOCTYPE HTML>
<html>
  <head>
    <script src = "lib/math2D.js"></script>
    <script src = "lib/canvasobject.js"></script>
    <script src = "lib/field.js"></script>
    <script src = "lib/keyboard.js"></script>
    <script src='lib/drawing.js'></script>
    <style>
        body {
            color: white;
            background-color: black;
        }
        canvas {
            border: 2px solid black;
            position: absolute;
            left: 30px;
            top: 100px;
            background-color: transparent;
            .background-image: url("images/bg.png");
        }
        div {
            position:absolute;
            top: 420px;
            left: 30px;
        }
    </style>
  </head>
  <body>
    Move with the arrow keys<br />
    Mouseover a color to show the color in the background (for debugging purposes)<br />
    <canvas id="environment" width="600" height="400" style=></canvas>
    <canvas id="game" width="600" height="400" style=></canvas>
  </body>
  
  <script id=utility>
    MOUSE_DOWN = "mouse down";
    MOUSE_UP = "mouse up";
    MOUSE_DRAG = "mouse drag";
    function logf() {
        stack = []
        func = arguments.callee.caller
        stackstring = func.name
        indent = ""
        while (func && stack.length<10) {
            stack.push(func)
            func = stack[stack.length-1].arguments.callee.caller
            if (func) {
                stackstring = func.name + " > " + stackstring
                indent += "    "
            }
        }
        console.log("[-logf-]", stackstring, stack[0].arguments);
    }
    function loadImage(ctx, src, pos) {
        var img = new Image();
        if (pos) img.onload = function() { ctx.drawImage(img, pos.x, pos.y); }
        img.src = src;
        return img
    }
    function iter(array, callback) {
        if (!callback || !array || !array.length) return;
        for (var i=0; i < array.length; i++) {
            callback(array[i]);
        }
    }
    function isArray(a) {
      return Object.prototype.toString.apply(a) === '[object Array]';
    }
    function isInArray(item, a) {
      return a.indexOf(item) != -1;
    }
    function hw() {
        console.log("Hello world");
    }
    function clear(ctx) {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }
    function text(txt, pos, pos_loc) {
        if (!isArray(txt)) txt = [txt];
        
        if (pos == "center")
            pos = xy(c.width/2 - ctx.measureText(txt).width/2, c.height/2 + font.size/2);
        else if (!pos_loc || pos_loc.toLowerCase()=="nw")
            pos.add(xy(0, font.size));
        else if (pos_loc.toLowerCase()=="ne")
            pos.add(xy(-ctx.measureText(txt).width, font.size));
        else if (pos_loc.toLowerCase()=="se")
            pos.add(xy(ctx.measureText(txt).width, 0));
            
        for (var i=0; i < txt.length; i++) {
            if (typeof(txt[i]) != "string") continue;
            ctx.fillText(txt[i], pos.x, pos.y);
            pos.add(xy(0, font.size));
        }
    }
    function boxcoords(size) {
        var r = size/2;
        return [xy(-r, -r), xy(r, -r), xy(r, r), xy(-r, r)];
    }
    
    grid = {color: "gray", x:20, y:20, X:5, Y:5};
    function drawGrid() {
        if (!grid.dash) grid.dash = 1;
        if (!grid.color) grid.color = "gray";
        
        ctx.strokeStyle = grid.color;
        ctx.lineWidth = 1;
        
        var W = ctx.canvas.width;
        var H = ctx.canvas.height;
        
        var dx = xy(grid.x, 0);
        var dy = xy(0, grid.y);
        
        // Horizontal grid lines
        var p0 = xy(0, 0.5);
        var p1 = xy(W, 0.5);
        var i = 0;
        while (p0.y <= H) {
            // Minor grid lines
            if (grid.X && i % grid.X != 0) {
                p1.x = grid.dash;
                while(p1.x <= W) {
                    line(ctx, p0, p1);
                    p0.add({x:grid.dash*2, y:0});
                    p1.add({x:grid.dash*2, y:0});
                }
                p0.x = 0;
                p1.x = W;
            }
            // Major grid lines
            else {
                line(ctx, p0, p1);
            }
            p0.add({x:0, y:grid.y});
            p1.add({x:0, y:grid.y});
            i++;
        }
        // Vertical grid lines
        p0 = xy(0.5, 0);
        p1 = xy(0.5, H);
        i = 0;
        while (p0.x <= W) {
            // Minor grid lines
            if (grid.Y && i % grid.Y != 0) {
                p1.y = grid.dash;
                while(p1.y <= H) {
                    line(ctx, p0, p1);
                    p0.add({x:0, y:grid.dash*2});
                    p1.add({x:0, y:grid.dash*2});
                }
                p0.y = 0;
                p1.y = H;
            }
            // Major grid lines
            else {
                line(ctx, p0, p1);
            }
            p0.add({x:grid.x, y:0});
            p1.add({x:grid.x, y:0});
            i++;
        }
        
    }
  </script>
  
  <script id=color_functions>
    function colorDiff(c1, c2) {
      if ((c1+"")[0]=='r') c1 = c1.toHSL();
      if ((c2+"")[0]=='r') c2 = c2.toHSL();
      return Math.sqrt(Math.pow((c2.h - c1.h), 2) + Math.pow(100*(c2.s - c1.s), 2) + Math.pow(100*(c2.l - c1.l), 2))
    }
    function rgb(r, g, b) {
      return {
        r: r,
        g: g,
        b: b,
        toHSL: function() {
          // adapted from the algorithm detailed at:
          // http://www.cs.rit.edu/~ncs/color/t_convert.html#RGB%20to%20HSV%20&%20HSV%20to%20RGB 
          
          // First convert to HSV
          var h = null;
          var s = null;
          var v = null;
          
          var min = Math.min(this.r, this.g, this.b);
          var max = Math.max(this.r, this.g, this.b);
          var v = max;
          var delta = max - min;
          
          if (max != 0) s = delta / max;
          else {
            // all coordinates are 0
            s = 0;
            h = -1;
            return hsl(h, s, l);
          }
          
          if (max == r)
            h = (g - b) / delta;     // between yellow and magenta
          else if (max == g)
            h = 2 + (b - r) / delta; // between cyan and yellow
          else
            h = 4 + (r - g) / delta; // between magenta and cyan
          
          h = mod(h*60, 360);
          v /= 255;
          
          // Now, convert to HSL 
          var l = (2 - s) * v;
          s *= v;
          s /= (l <= 1)? l : 2 - l;
          l /= 2;
          
          return hsl(h, s, l);
        },
        toString: function() { return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")"}
      }
    }
    function hsl(h, s, l) {
      return {
        h: h,
        s: s,
        l: l,
        toString: function() { return "hsl(" + this.h + ", " + this.s*100 + "%, " + this.l*100 + "%)"}
      }
    }
    
  </script>
  
  <script id=game_vars>
    var c = document.getElementById("game");
    var ctx = c.getContext("2d");
    var frame = 0;
    var mouse = {pos:xy(0, 0), delta:xy(0, 0), velocity:xy(0, 0), motion:"still", new_pos:false, state:MOUSE_UP};
    var font = {size: 20, type: 'Arial'}
    var camera_edge_width = 50; // when the player gets this close to the edge, then the camera starts moving
    
    dirs = {
      left: xy(-1, 0),
      right: xy(1, 0),
      up: xy(0, -1),
      down: xy(0, 1)
    }
    
    var game = {
        title: "GAME TITLE",
        fps: 60,
        objects: [],
        bg_color: 'transparent',
        size: xy(600,400),
        keydirs: keydirs_lrud
        
    }
    c.style.backgroundColor = game.bg_color;
    
  </script>
  
  <script id=game_resources>
    var images = {
        //splash: loadImage(ctx, "images/splash.png")
        bg: loadImage(ctx, "images/bg.png")
    }
  </script>
  
  <script id=game_objs>
    
    environment = {
      id: "environment",
      ctx: document.getElementById("environment").getContext("2d"),
       
      img: images.bg,
      pos: xy(400, 200),
      
      redraw: function() {
        this.ctx.clearRect(0, 0, game.size.x, game.size.y);
        this.ctx.drawImage(this.img, -this.pos.x, -this.pos.y);
      },
      shift: function(delta) {
        this.pos.add(delta);
        this.pos.x = Math.min(this.img.width - game.size.x, this.pos.x);
        this.pos.y = Math.min(this.img.height - game.size.y, this.pos.y);
        this.pos.x = Math.max(0, this.pos.x);
        this.pos.y = Math.max(0, this.pos.y);
        this.redraw();
      },
      getPixel: function(pos) {
        //pos = add(pos, this.pos);
        //console.log("Getting the images pixel at " + pos);
        pos = vround(pos);
        var imd = this.ctx.getImageData(0, 0, game.size.x, game.size.y);
        var index = 4 * ((pos.y * game.size.x) + pos.x);
        var rgba = [];
        for (var i=0; i<4; i++) rgba.push(imd.data[index + i]);
        return rgb(rgba[0], rgba[1], rgba[2]);
      },
      tick: function() {
      },
      draw: function() {
      }
      
    }
    game.objects.push(environment);
    
    player = {
      id: "player",
      pos: xy(300, 200),
      speed: 5,
      //default_speed: 10,
      //speeds: {'left': 10, 'right': 10, 'up': 10,  'down': 10},
      navigation: [],
      checkForCameraEdge: function() {
        var xshift = 0;
        var yshift = 0;
        if (this.pos.x < camera_edge_width) xshift = this.pos.x - camera_edge_width;
        if (this.pos.y < camera_edge_width) yshift = this.pos.y - camera_edge_width;
        if (this.pos.x > (game.size.x - camera_edge_width)) xshift = this.pos.x - (game.size.x - camera_edge_width);
        if (this.pos.y > (game.size.y - camera_edge_width)) yshift = this.pos.y - (game.size.y - camera_edge_width);
        if (xshift != 0 || yshift != 0) {
          environment.shift(xy(xshift, yshift));
          this.pos.add(xy(-xshift, -yshift));
        }
      },
      move: function(delta) {
        this.pos.add(delta);
        this.checkForCameraEdge();
      },
      canMoveInDir: function(delta) {
        var color_tolerance = 10;
        var current_pixel = environment.getPixel(this.pos);
        var target_pos = add(delta, this.pos);
        var color_diff = colorDiff(current_pixel, environment.getPixel(add(delta, this.pos)));
        return color_diff < color_tolerance;
      },
      tick: function() {
        if (this.navigation.length == 0) return;
        // Move it if the human player is pressing keys (indicated by the navigation array)
        delta = xy(0, 0);
        for (var i=0; i < this.navigation.length; i++) {
          delta.add(dirs[this.navigation[i]]);
        }
        delta.normalize(this.speed);
        if (this.canMoveInDir(delta)) this.move(delta);
        
      },
      draw: function() {
        // Black dot with white smiley face
        ctx.fillStyle = 'black';
        ctx.strokeStyle = 'black';
        circle(ctx, this.pos, 6);
        ctx.fillStyle = 'white';
        circle(ctx, add(this.pos, xy(-2, -2)), 1.5);
        circle(ctx, add(this.pos, xy(2, -2)), 1.5);
        ctx.closePath();
        ctx.beginPath();
        ctx.arc(this.pos.x, this.pos.y + 1, 2.5, 0, Math.PI);
        ctx.strokeStyle = 'white';
        ctx.stroke();
      }
    }
    game.objects.push(player);
    
  </script>
  
  <script id=game_stages>
    function titleScreen() {
        clear();
        ctx.drawImage(images.splash, 0, 0);
        text(game.title, xy(100, 100));
    }
    function menu() {
        clear();
        text("Menu:", xy(130, 130));
        text(["Easy", "Normal", "Hard"], xy(220, 130));
    }
    function gameplay() {
    }
  </script>
  
  <script id=events>
    var t0 = new Date().getTime();
    function time() { return new Date().getTime() - t0; }
    
    c.addEventListener("mousemove", function(event) {
        pos = calcMouseCanvasPos(event);
        mouse.velocity = add(pos, neg(mouse.pos));
        mouse.pos = pos;
        mouse.new_pos = true;
        mouse.motion = "moving";
        document.getElementsByTagName("body")[0].style.backgroundColor = environment.getPixel(mouse.pos).toHSL()+"";
        
        
        if (mouse.state == MOUSE_DOWN) { mouse.state = MOUSE_DRAG; }
            
        if (mouse.state == MOUSE_DRAG) {
            if (c.clicked_object) c.clicked_object.ondrag(mouse.velocity);
        }
        
    });
    c.addEventListener("mousedown", function(event) {
        mouse.state = MOUSE_DOWN;
    });
    c.addEventListener("mouseup", function(event) {
        //console.log("\t" + time() + "\tmouseup\t" + mouse.motion + "\t" + mouse.velocity);
        // CanvasObject onclick event
        if (mouse.state == MOUSE_DOWN && c.clicked_object) c.clicked_object.onclick(mouse.pos);
        
        // CanvasObject onmouseup event
        if (c.clicked_object) c.clicked_object.onmouseup();
        
        mouse.state = MOUSE_UP;
        c.clicked_object = null;
    });
    c.addEventListener("click", function(event) {
        console.log("Clicked at " + mouse.pos);
        console.log("  Player color: " + environment.getPixel(player.pos).toHSL()+"");
        console.log("  Mouse color:  " + environment.getPixel(mouse.pos).toHSL()+"");
        console.log("  -> Color diff: " + colorDiff(environment.getPixel(mouse.pos), environment.getPixel(player.pos)));
    })
    function calcMouseCanvasPos(event) {
        if (navigator.userAgent.match(/Firefox/i)) {
            return xy(event.layerX, event.layerY);
		}
		else if (navigator.userAgent.match(/Chrome/i)) {
            return xy(event.layerX, event.layerY);
		}
		else if (navigator.userAgent.match(/MSIE/i)) {
            return xy(event.x - c.offsetLeft, event.y - c.offsetTop);
		}
		else {
			// This is the same as the Chrome code
            return xy(event.layerX, event.layerY);
		}
    }
    
    // Event listeners for moving the player char
    window.addEventListener("keydown", function(event) {
      key = getKeyFromEvent(event);
      if (key in game.keydirs) {
        for (var i=0; i < player.navigation.length; i++) {
          if (player.navigation[i] == game.keydirs[key]) return;
        }
        player.navigation.push(game.keydirs[key]);
      }
    }, false);
    window.addEventListener("keyup", function(event) {
      key = getKeyFromEvent(event);
      if (player.navigation.indexOf(game.keydirs[key]) != -1) {
        player.navigation.splice(player.navigation.indexOf(game.keydirs[key]), 1);
      }
    });
    
  </script>
  
  <script id=main>
    function update_mouse() {
        if (!mouse.new_pos) {
            if (mouse.motion == "moving") mouse.motion = "stopped";
            else {
                mouse.motion = "still";
                mouse.velocity = xy(0, 0);
            }
        }
        mouse.new_pos = false;
    }
    function next() {
        update_mouse();
        ctx.clearRect(0, 0, 600, 400);
        iter(game.objects, function(obj) {
            obj.tick(); obj.draw();
        });
        tick();
    }
    function tick() {
        frame++;
        setTimeout(next, 1000/game.fps);
    }
    window.onload = function() {
        ctx.font = font.size.toString() + "px " + font.type;
        //titleScreen();
        //menu();
        
        environment.redraw();
        tick();
    }
  </script>
</html>